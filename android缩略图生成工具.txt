在Android 2.2版本中，新增了一个ThumbnailUtils工具类来是实现缩略图，此工具类的功能是强大的，使用是简单，它提供了一个常量和三个方法。利用这些常数和方法，可以轻松快捷的实现图片和视频的缩略图功能。

<1>ThumbnailUtils工具类

常量：

OPTIONS_RECYCLE_INPUT

从此常量用于表示应该回收extractThumbnail(Bitmap, int, int, int)输入源图片(第一个参数)，除非输出图片就是输入图片。

 

 

方法：

　　　　Bitmap createVideoThumbnail(String filePath, int kind)

　　　　创建一张视频的缩略图。如果视频已损坏或者格式不支持可能返回null。

              参数：

                                filePath： 视频文件路径

　　　　                 kind：　　文件种类，可以是 MINI_KIND 或 MICRO_KIND

　　　　Bitmap extractThumbnail(Bitmap source, int width, int height, int options)

　　　　创建所需尺寸居中缩放的位图。

　　　　参数：

　　　　　　　　  source： 需要被创造缩略图的源位图对象

　　　　　　　　  width：　生成目标的宽度

　　　　　　　　 height： 生成目标的高度

　　　　　　　　 options：在缩略图抽取时提供的选项

　　　　Bitmap extractThumbnail(Bitmap source, int width, int height)

　　　　创建所需尺寸居中缩放的位图。

　　　　参数：

　　　　　　　　source： 需要被创造缩略图的源位图对象

　　　　　　　　width：　生成目标的宽度

　　　　　　　　height： 生成目标的高度

 

<2>具体实现：

import android.app.Activity;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.media.ThumbnailUtils;
import android.os.Bundle;
import android.widget.ImageView;

public class ThumbnailActivity extends Activity {  
  
  private Bitmap bitmap = null;
	private ImageView image;
     @Override  
     public void onCreate(Bundle savedInstanceState) {  
        super.onCreate(savedInstanceState);  
        setContentView(R.layout.main);  
        image = (ImageView) findViewById(R.id.image);  
        //得到原图片
        bitmap = BitmapFactory.decodeResource(getResources(), R.drawable.v);
        //得到缩略图
        bitmap = ThumbnailUtils.extractThumbnail(bitmap, 100, 100);  
        image.setImageBitmap(bitmap);  
    }  
}  


<?xml version="1.0" encoding="utf-8"?>
 <LinearLayout 
     xmlns:android="http://schemas.android.com/apk/res/android" 
     android:orientation="vertical"
     android:background="#999999" 
     android:layout_width="fill_parent" 
     android:layout_height="fill_parent">
     <ImageView  
         android:layout_width="wrap_content" 
         android:layout_height="wrap_content" 
         android:src="@drawable/v"
         android:layout_marginLeft="10dip"/>
     <TextView  
         android:layout_width="wrap_content" 
         android:layout_height="wrap_content" 
         android:text="缩略图：" 
         android:textColor="#000000"/>
     <ImageView android:id="@+id/image" 
         android:layout_width="wrap_content" 
         android:layout_height="wrap_content"
         android:layout_marginLeft="10dip"/>
 </LinearLayout>
 
 
 Android 获取SDCard上图片和视频的缩略图(引用)
 http://blog.csdn.net/akon_vm/article/details/7419274
 如下为代码：
//activity code
import java.io.File;
import android.app.Activity;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.media.ThumbnailUtils;
import android.os.Bundle;
import android.os.Environment;
import android.provider.MediaStore;
import android.widget.ImageView;
/**
 * 获取图片和视频的缩略图
 * 这两个方法必须在2.2及以上版本使用，因为其中使用了ThumbnailUtils这个类
 */
public class AndroidTestActivity extends Activity {
	private ImageView imageThumbnail;
	private ImageView videoThumbnail;

	/** Called when the activity is first created. */
	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.main);

		imageThumbnail = (ImageView) findViewById(R.id.image_thumbnail);
		videoThumbnail = (ImageView) findViewById(R.id.video_thumbnail);

		String imagePath = Environment.getExternalStorageDirectory()
				.getAbsolutePath()
				+ File.separator
				+ "photo"
				+ File.separator
				+ "yexuan.jpg";

		String videoPath = Environment.getExternalStorageDirectory()
				.getAbsolutePath()
				+ File.separator
				+ "video"
				+ File.separator
				+ "醋点灯.avi";
		
		imageThumbnail.setImageBitmap(getImageThumbnail(imagePath, 60, 60));
		videoThumbnail.setImageBitmap(getVideoThumbnail(videoPath, 60, 60,
				MediaStore.Images.Thumbnails.MICRO_KIND));
	}

	/**
	 * 根据指定的图像路径和大小来获取缩略图
	 * 此方法有两点好处：
	 *     1. 使用较小的内存空间，第一次获取的bitmap实际上为null，只是为了读取宽度和高度，
	 *        第二次读取的bitmap是根据比例压缩过的图像，第三次读取的bitmap是所要的缩略图。
	 *     2. 缩略图对于原图像来讲没有拉伸，这里使用了2.2版本的新工具ThumbnailUtils，使
	 *        用这个工具生成的图像不会被拉伸。
	 * @param imagePath 图像的路径
	 * @param width 指定输出图像的宽度
	 * @param height 指定输出图像的高度
	 * @return 生成的缩略图
	 */
	private Bitmap getImageThumbnail(String imagePath, int width, int height) {
		Bitmap bitmap = null;
		BitmapFactory.Options options = new BitmapFactory.Options();
		options.inJustDecodeBounds = true;
		// 获取这个图片的宽和高，注意此处的bitmap为null
		bitmap = BitmapFactory.decodeFile(imagePath, options);
		options.inJustDecodeBounds = false; // 设为 false
		// 计算缩放比
		int h = options.outHeight;
		int w = options.outWidth;
		int beWidth = w / width;
		int beHeight = h / height;
		int be = 1;
		if (beWidth < beHeight) {
			be = beWidth;
		} else {
			be = beHeight;
		}
		if (be <= 0) {
			be = 1;
		}
		options.inSampleSize = be;
		// 重新读入图片，读取缩放后的bitmap，注意这次要把options.inJustDecodeBounds 设为 false
		bitmap = BitmapFactory.decodeFile(imagePath, options);
		// 利用ThumbnailUtils来创建缩略图，这里要指定要缩放哪个Bitmap对象
		bitmap = ThumbnailUtils.extractThumbnail(bitmap, width, height,
				ThumbnailUtils.OPTIONS_RECYCLE_INPUT);
		return bitmap;
	}

	/**
	 * 获取视频的缩略图
	 * 先通过ThumbnailUtils来创建一个视频的缩略图，然后再利用ThumbnailUtils来生成指定大小的缩略图。
	 * 如果想要的缩略图的宽和高都小于MICRO_KIND，则类型要使用MICRO_KIND作为kind的值，这样会节省内存。
	 * @param videoPath 视频的路径
	 * @param width 指定输出视频缩略图的宽度
	 * @param height 指定输出视频缩略图的高度度
	 * @param kind 参照MediaStore.Images.Thumbnails类中的常量MINI_KIND和MICRO_KIND。
	 *            其中，MINI_KIND: 512 x 384，MICRO_KIND: 96 x 96
	 * @return 指定大小的视频缩略图
	 */
	private Bitmap getVideoThumbnail(String videoPath, int width, int height,
			int kind) {
		Bitmap bitmap = null;
		// 获取视频的缩略图
		bitmap = ThumbnailUtils.createVideoThumbnail(videoPath, kind);
		System.out.println("w"+bitmap.getWidth());
		System.out.println("h"+bitmap.getHeight());
		bitmap = ThumbnailUtils.extractThumbnail(bitmap, width, height,
				ThumbnailUtils.OPTIONS_RECYCLE_INPUT);
		return bitmap;
	}
	
}

//mail.xml
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="fill_parent"
    android:layout_height="fill_parent"
    android:orientation="vertical" >

    <TextView
        android:layout_width="fill_parent"
        android:layout_height="wrap_content"
        android:text="图片缩略图" />

    <ImageView
        android:id="@+id/image_thumbnail"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content" />

    <TextView
        android:layout_width="fill_parent"
        android:layout_height="wrap_content"
        android:text="视频缩略图" />

    <ImageView
        android:id="@+id/video_thumbnail"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content" />

</LinearLayout>
